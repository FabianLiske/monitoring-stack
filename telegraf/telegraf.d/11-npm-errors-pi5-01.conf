# --- NPM Error-Logs parsen ---
[[inputs.tail]]
  files = ["/var/log/npm/all_proxy_error.log"]
  initial_read_offset = "beginning"
  watch_method = "poll"
  data_format = "grok"

  # Feste Tags (Routing/Ident)
  [inputs.tail.tags]
    domain = "service"
    proxy_id = "npm@pi5-01"

  # 1) Grok: Muster + Custom-Patterns
  grok_patterns = ['%{NGINX_ERROR_ENRICHED}']
  grok_custom_patterns = '''
NGXERRTS %{YEAR:year}/%{MONTHNUM:month}/%{MONTHDAY:day} %{TIME:time}
NGINX_ERROR_ENRICHED %{NGXERRTS:ts} \[%{LOGLEVEL:level}\] %{NUMBER:pid:int}#%{NUMBER:tid:int}: \*%{NUMBER:conn:int} %{DATA:message}(?:, client: %{IPORHOST:client})?(?:, server: %{HOSTNAME:server})?(?:, request: "%{WORD:method} %{DATA:request_uri} HTTP/%{NUMBER:http_version}")?(?:, upstream: "(?:%{URI:upstream}|%{DATA:upstream})")?(?:, host: "%{DATA:host}")?(?:, referrer: "%{DATA:referrer}")?
'''

# 2) level & server zu Tags machen
[[processors.enum]]
  [[processors.enum.tag]]
    field = "level"
    dest = "level"
  [[processors.enum.tag]]
    field = "server"
    dest = "server"

# 3) Event-Typ aus der Message ableiten (zuerst als Field)
[[processors.regex]]
  [[processors.regex.fields]]
    key = "message"
    pattern = "buffered to a temporary file"
    replacement = "buffered_tempfile"
    result_key = "event"

# 4) upstream_host aus upstream-URL ziehen (erstmal Field)
[[processors.regex]]
  [[processors.regex.fields]]
    key = "upstream"
    pattern = "^https?://([^/:]+)"
    replacement = "${1}"
    result_key = "upstream_host"

# 5) event & upstream_host in Tags umwandeln
[[processors.enum]]
  [[processors.enum.tag]]
    field = "event"
    dest = "event"
  [[processors.enum.tag]]
    field = "upstream_host"
    dest = "upstream_host"

# 6) Typen f√ºr optionale Debug-Felder
[[processors.converter]]
  [processors.converter.fields]
    integer = ["pid","tid","conn"]
    float = ["http_version"]
